-- Generated by Oracle SQL Developer Data Modeler 18.4.0.339.1536
--   at:        2019-03-21 11:58:01 CET
--   site:      Oracle Database 10g
--   type:      Oracle Database 10g
--   edited:	By Jakub Bohm ( also an author )
--	 purpose:	DDL script for database school project

--BECAUSE MY CREATE SCRIPT CREATES TRIGGERS, TABLES AND ALL THE STUFF, I AM USING A SCRIPT I FOUND ON STACKOVERFLOW TO DELETE THEM ( LINK INCLUDED IN SOURCES )
BEGIN
   FOR cur_rec IN (SELECT object_name, object_type
                     FROM user_objects
                    WHERE object_type IN
                             ('TABLE',
                              'VIEW',
                              'PACKAGE',
                              'PROCEDURE',
                              'FUNCTION',
                              'SEQUENCE',
                              'SYNONYM',
                              'PACKAGE BODY'
                             ))
   LOOP
      BEGIN
         IF cur_rec.object_type = 'TABLE'
         THEN
            EXECUTE IMMEDIATE    'DROP '
                              || cur_rec.object_type
                              || ' "'
                              || cur_rec.object_name
                              || '" CASCADE CONSTRAINTS';
         ELSE
            EXECUTE IMMEDIATE    'DROP '
                              || cur_rec.object_type
                              || ' "'
                              || cur_rec.object_name
                              || '"';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.put_line (   'FAILED: DROP '
                                  || cur_rec.object_type
                                  || ' "'
                                  || cur_rec.object_name
                                  || '"'
                                 );
      END;
   END LOOP;
END;
/

CREATE TABLE adresa (
    id_adresy    INTEGER NOT NULL,
    ulice        NVARCHAR2(30),
    cisloPopis   NVARCHAR2(12),
    mesto        NVARCHAR2(30) NOT NULL check (LENGTH(mesto) > 2),
    psc          NVARCHAR2(10) NOT NULL check (LENGTH(psc) <= 10),
    id_zeme     INTEGER NOT NULL
);

ALTER TABLE adresa ADD CONSTRAINT pk_adresa PRIMARY KEY ( id_adresy );

CREATE TABLE munice (
    id_polozky   INTEGER NOT NULL,
    nazev        NVARCHAR2(30) NOT NULL check (LENGTH(nazev) > 1),
    hmotnost     INTEGER NOT NULL,
    rychlost     INTEGER NOT NULL,
    energie      INTEGER NOT NULL
);

ALTER TABLE munice ADD CONSTRAINT pk_munice PRIMARY KEY ( id_polozky );

ALTER TABLE munice ADD CONSTRAINT ux_munice_nazev UNIQUE ( nazev );

CREATE TABLE polozka (
    id_polozky     INTEGER NOT NULL,
    cena           INTEGER NOT NULL check (cena > 0),
    polozka_type   VARCHAR2(7) NOT NULL
);

ALTER TABLE polozka
    ADD CONSTRAINT ch_inh_polozka CHECK ( polozka_type IN (
        'munice',
        'polozka',
        'zbran'
    ) );

ALTER TABLE polozka ADD CONSTRAINT pk_polozka PRIMARY KEY ( id_polozky );

CREATE TABLE prodej (
    id_prodeje     INTEGER NOT NULL,
    datProd        DATE NOT NULL,
    pozn           NVARCHAR2(150),
    id_zakaznika   INTEGER NOT NULL,
    id_zam         INTEGER NOT NULL
);

ALTER TABLE prodej ADD CONSTRAINT pk_prodej PRIMARY KEY ( id_prodeje );

CREATE TABLE prodej_polozky (
    id_prodeje   INTEGER NOT NULL,
    id_polozky   INTEGER NOT NULL,
    mnozstvi     INTEGER NOT NULL check (mnozstvi <= 1000)
);

ALTER TABLE prodej_polozky ADD CONSTRAINT pk_prodej_polozky PRIMARY KEY ( id_prodeje,
                                                                          id_polozky );

CREATE TABLE zeme (
    id_zeme   INTEGER NOT NULL,
    nazev      NVARCHAR2(30) NOT NULL,
    zkratka    NVARCHAR2(5) NOT NULL
);

ALTER TABLE zeme ADD CONSTRAINT pk_zeme PRIMARY KEY ( id_zeme );

ALTER TABLE zeme ADD CONSTRAINT ux_zeme_nazev UNIQUE ( nazev );

ALTER TABLE zeme ADD CONSTRAINT ux_zeme_zkratka UNIQUE ( zkratka );

CREATE TABLE typ (
    id_typu   INTEGER NOT NULL,
    nazev     NVARCHAR2(30) NOT NULL
);

ALTER TABLE typ ADD CONSTRAINT pk_typ PRIMARY KEY ( id_typu );

ALTER TABLE typ ADD CONSTRAINT ux_typ_nazev UNIQUE ( nazev );

CREATE TABLE vyrobce (
    id_vyr        INTEGER NOT NULL,
    nazev         NVARCHAR2(40) NOT NULL check (LENGTH(nazev) > 3), --ADDED 10 MORE CHARACTERS, NOT INCLUDED IN ER SCHEMA
    rokZalozeni   INTEGER NOT NULL check (rokZalozeni > 1800),
    id_adresy     INTEGER NOT NULL
);

ALTER TABLE vyrobce ADD CONSTRAINT pk_vyrobce PRIMARY KEY ( id_vyr );

CREATE TABLE zakaznik (
    id_zakaznika   INTEGER NOT NULL,
    jmeno          NVARCHAR2(30) NOT NULL,
    prijmeni       NVARCHAR2(30) NOT NULL,
    telefon        NVARCHAR2(20) NOT NULL,
    email          NVARCHAR2(50) NOT NULL,
    id_adresy      INTEGER NOT NULL
);

ALTER TABLE zakaznik ADD CONSTRAINT pk_zakaznik PRIMARY KEY ( id_zakaznika );

CREATE TABLE zamestnanec (
    id_zam     INTEGER NOT NULL,
    jmeno      NVARCHAR2(30) NOT NULL,
    prijmeni   NVARCHAR2(30) NOT NULL,
    zamCis     NVARCHAR2(12) NOT NULL
);

ALTER TABLE zamestnanec ADD CONSTRAINT pk_zamestnanec PRIMARY KEY ( id_zam );

ALTER TABLE zamestnanec ADD CONSTRAINT ux_zamestnanec_zamCis UNIQUE ( zamCis );

CREATE TABLE zbran (
    id_polozky    INTEGER NOT NULL,
    vyrCis        NVARCHAR2(10) NOT NULL,
    nazevModelu   NVARCHAR2(30) NOT NULL check (LENGTH(nazevModelu) > 1),
    rokNavrhu     INTEGER NOT NULL check (roknavrhu > 1800),
    id_vyr        INTEGER NOT NULL,
    id_typu       INTEGER NOT NULL,
    id_munice     INTEGER NOT NULL
);

ALTER TABLE zbran ADD CONSTRAINT pk_zbran PRIMARY KEY ( id_polozky );

ALTER TABLE zbran ADD CONSTRAINT ux_zbran_vyrCis UNIQUE ( vyrCis );

ALTER TABLE adresa
    ADD CONSTRAINT fk_adresa_zeme FOREIGN KEY ( id_zeme )
        REFERENCES zeme ( id_zeme );

ALTER TABLE munice
    ADD CONSTRAINT fk_munice_polozka FOREIGN KEY ( id_polozky )
        REFERENCES polozka ( id_polozky );

ALTER TABLE prodej_polozky
    ADD CONSTRAINT fk_prodej_polozky_polozka FOREIGN KEY ( id_polozky )
        REFERENCES polozka ( id_polozky );

ALTER TABLE prodej_polozky
    ADD CONSTRAINT fk_prodej_polozky_prodej FOREIGN KEY ( id_prodeje )
        REFERENCES prodej ( id_prodeje );

ALTER TABLE prodej
    ADD CONSTRAINT fk_prodej_zakaznik FOREIGN KEY ( id_zakaznika )
        REFERENCES zakaznik ( id_zakaznika );

ALTER TABLE prodej
    ADD CONSTRAINT fk_prodej_zamestnanec FOREIGN KEY ( id_zam )
        REFERENCES zamestnanec ( id_zam );

ALTER TABLE vyrobce
    ADD CONSTRAINT fk_vyrobce_adresa FOREIGN KEY ( id_adresy )
        REFERENCES adresa ( id_adresy );

ALTER TABLE zakaznik
    ADD CONSTRAINT fk_zakaznik_adresa FOREIGN KEY ( id_adresy )
        REFERENCES adresa ( id_adresy );

ALTER TABLE zbran
    ADD CONSTRAINT fk_zbran_munice FOREIGN KEY ( id_munice )
        REFERENCES munice ( id_polozky );

ALTER TABLE zbran
    ADD CONSTRAINT fk_zbran_polozka FOREIGN KEY ( id_polozky )
        REFERENCES polozka ( id_polozky );

ALTER TABLE zbran
    ADD CONSTRAINT fk_zbran_typ FOREIGN KEY ( id_typu )
        REFERENCES typ ( id_typu );

ALTER TABLE zbran
    ADD CONSTRAINT fk_zbran_vyrobce FOREIGN KEY ( id_vyr )
        REFERENCES vyrobce ( id_vyr )
            ON DELETE CASCADE;

CREATE OR REPLACE TRIGGER arc_fkarc_1_munice BEFORE
    INSERT OR UPDATE OF id_polozky ON munice
    FOR EACH ROW
DECLARE
    d VARCHAR2(7);
BEGIN
    SELECT
        a.polozka_type
    INTO d
    FROM
        polozka a
    WHERE
        a.id_polozky = :new.id_polozky;

    IF ( d IS NULL OR d <> 'munice' ) THEN
        raise_application_error(-20223, 'FK FK_munice_polozka in Table munice violates Arc constraint on Table polozka - discriminator column polozka_TYPE doesn''t have value ''munice'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_zbran BEFORE
    INSERT OR UPDATE OF id_polozky ON zbran
    FOR EACH ROW
DECLARE
    d VARCHAR2(7);
BEGIN
    SELECT
        a.polozka_type
    INTO d
    FROM
        polozka a
    WHERE
        a.id_polozky = :new.id_polozky;

    IF ( d IS NULL OR d <> 'zbran' ) THEN
        raise_application_error(-20223, 'FK FK_zbran_polozka in Table zbran violates Arc constraint on Table polozka - discriminator column polozka_TYPE doesn''t have value ''zbran'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE SEQUENCE adresa_id_adresy_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER adresa_id_adresy_trg BEFORE
    INSERT ON adresa
    FOR EACH ROW
    WHEN ( new.id_adresy IS NULL )
BEGIN
    SELECT
        adresa_id_adresy_seq.NEXTVAL
    INTO :new.id_adresy
    FROM
        dual;

END;
/

CREATE SEQUENCE polozka_id_polozky_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER polozka_id_polozky_trg BEFORE
    INSERT ON polozka
    FOR EACH ROW
    WHEN ( new.id_polozky IS NULL )
BEGIN
    SELECT
        polozka_id_polozky_seq.NEXTVAL
    INTO :new.id_polozky
    FROM
        dual;

END;
/

CREATE SEQUENCE prodej_id_prodeje_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER prodej_id_prodeje_trg BEFORE
    INSERT ON prodej
    FOR EACH ROW
    WHEN ( new.id_prodeje IS NULL )
BEGIN
    SELECT
        prodej_id_prodeje_seq.NEXTVAL
    INTO :new.id_prodeje
    FROM
        dual;

END;
/

CREATE SEQUENCE zeme_id_zeme_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zeme_id_zeme_trg BEFORE
    INSERT ON zeme
    FOR EACH ROW
    WHEN ( new.id_zeme IS NULL )
BEGIN
    SELECT
        zeme_id_zeme_seq.NEXTVAL
    INTO :new.id_zeme
    FROM
        dual;

END;
/

CREATE SEQUENCE typ_id_typu_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER typ_id_typu_trg BEFORE
    INSERT ON typ
    FOR EACH ROW
    WHEN ( new.id_typu IS NULL )
BEGIN
    SELECT
        typ_id_typu_seq.NEXTVAL
    INTO :new.id_typu
    FROM
        dual;

END;
/

CREATE SEQUENCE vyrobce_id_vyr_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER vyrobce_id_vyr_trg BEFORE
    INSERT ON vyrobce
    FOR EACH ROW
    WHEN ( new.id_vyr IS NULL )
BEGIN
    SELECT
        vyrobce_id_vyr_seq.NEXTVAL
    INTO :new.id_vyr
    FROM
        dual;

END;
/

CREATE SEQUENCE zakaznik_id_zakaznika_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zakaznik_id_zakaznika_trg BEFORE
    INSERT ON zakaznik
    FOR EACH ROW
    WHEN ( new.id_zakaznika IS NULL )
BEGIN
    SELECT
        zakaznik_id_zakaznika_seq.NEXTVAL
    INTO :new.id_zakaznika
    FROM
        dual;

END;
/

CREATE SEQUENCE zamestnanec_id_zam_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamestnanec_id_zam_trg BEFORE
    INSERT ON zamestnanec
    FOR EACH ROW
    WHEN ( new.id_zam IS NULL )
BEGIN
    SELECT
        zamestnanec_id_zam_seq.NEXTVAL
    INTO :new.id_zam
    FROM
        dual;

END;
/

--TRIGGER SECURING THAT THE DATE AND TIME WILL BE EXACTLY SAME AS SYSTEM DATE
create or replace trigger tr_prodej_hlidejDatum before
insert on prodej
for each row
BEGIN
    if( :new.datProd is NULL ) then 
    :new.datProd := SYSDATE;
    end if;
END;
/

--TRIGGER SECURING YEAR OF PROPOSAL OF A GUN
create or replace trigger tr_zbran_hlidejRok before
insert or update on zbran
for each row
DECLARE
    tmp integer;
BEGIN
    select to_char(sysdate, 'YYYY') into tmp from dual;
    if( :new.rokNavrhu > tmp ) then
    :new.rokNavrhu := tmp;
    DBMS_OUTPUT.PUT_LINE('Rok nĂˇvrhu je z budoucnosti. Rok byl nastaven na aktuĂˇlnĂ­ rok.');
    end if;
END;
/

--TRIGGER SECURING YEAR OF CREATION OF MANUFACTURER
create or replace trigger tr_vyrobce_hlidejRok before
insert or update on vyrobce
for each row
DECLARE
    tmp integer;
BEGIN
    select to_char(sysdate, 'YYYY') into tmp from dual;
    if( :new.rokZalozeni > tmp ) then
    :new.rokZalozeni := tmp;
    DBMS_OUTPUT.PUT_LINE('Rok zaloĹľenĂ­ je z budoucnosti. Rok byl nastaven na aktuĂˇlnĂ­ rok.');
    end if;
END;
/

--TRIGGER THAT AUTOMATICLY SETS polozka_TYPE TO ONE OF SUBTYPE TYPES BASED ON THE PRICE ( ISA HIERARCHY )
create or replace trigger tr_polozka_hlidejTyp before
insert on polozka
for each row
BEGIN
    if(:new.cena > 700) then
    :new.polozka_TYPE := 'zbran';
    else
    :new.polozka_TYPE := 'munice';
    end if;
END;
/

-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            11
-- CREATE INDEX                             0
-- ALTER TABLE                             30
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          10
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          8
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

